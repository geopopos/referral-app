name: Deploy to Digital Ocean VPS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_pgsql, zip, gd, redis
        coverage: none

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Composer dependencies (with dev for testing)
      run: composer install --optimize-autoloader --no-interaction

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Run tests
      run: |
        cp .env.example .env
        php artisan key:generate
        composer test

    - name: Install production dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction

    - name: Create deployment archive
      run: |
        # Clear any cache files that might change during archiving
        rm -f .phpunit.result.cache
        php artisan config:clear || true
        php artisan cache:clear || true
        php artisan view:clear || true
        php artisan route:clear || true
        
        # Wait for any remaining processes to complete
        sleep 3
        
        # Debug: Show current directory and files
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        # Create comprehensive exclude file
        cat > .tarignore << 'EOF'
        .git
        .github
        node_modules
        .env
        .env.*
        .phpunit.result.cache
        storage/logs
        storage/framework/cache
        storage/framework/sessions
        storage/framework/views
        storage/framework/testing
        bootstrap/cache
        tests
        vendor
        *.log
        *.tmp
        *.cache
        .DS_Store
        Thumbs.db
        deployment.tar.gz
        .tarignore
        EOF
        
        # Create archive with flags to handle changing files gracefully
        tar --ignore-failed-read --warning=no-file-changed -czf deployment.tar.gz --exclude-from=.tarignore .
        
        # Verify archive was created
        if [ -f deployment.tar.gz ]; then
          echo "‚úÖ Archive created successfully"
          ls -lh deployment.tar.gz
        else
          echo "‚ùå Archive creation failed"
          exit 1
        fi

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Set variables
          APP_NAME="referral-app"
          DEPLOY_PATH="/var/www/$APP_NAME"
          CURRENT_PATH="$DEPLOY_PATH/current"
          RELEASES_PATH="$DEPLOY_PATH/releases"
          SHARED_PATH="$DEPLOY_PATH/shared"
          RELEASE_NAME=$(date +%Y%m%d%H%M%S)
          RELEASE_PATH="$RELEASES_PATH/$RELEASE_NAME"
          
          # Store release name for subsequent steps
          echo $RELEASE_NAME > /tmp/release_name.txt
          
          # Create directory structure
          mkdir -p $RELEASES_PATH $SHARED_PATH/storage/logs $SHARED_PATH/storage/framework/{cache,sessions,views} $SHARED_PATH/storage/app
          
          # Create release directory
          mkdir -p $RELEASE_PATH
          
          echo "Deploying release: $RELEASE_NAME"
          echo "Release path: $RELEASE_PATH"

    - name: Upload and extract files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "deployment.tar.gz"
        target: "/tmp/"

    - name: Complete deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Set variables
          APP_NAME="referral-app"
          DEPLOY_PATH="/var/www/$APP_NAME"
          CURRENT_PATH="$DEPLOY_PATH/current"
          RELEASES_PATH="$DEPLOY_PATH/releases"
          SHARED_PATH="$DEPLOY_PATH/shared"
          
          # Read the release name from the previous step
          RELEASE_NAME=$(cat /tmp/release_name.txt)
          RELEASE_PATH="$RELEASES_PATH/$RELEASE_NAME"
          
          echo "Completing deployment for release: $RELEASE_NAME"
          echo "Release path: $RELEASE_PATH"
          
          # Verify release directory exists
          if [ ! -d "$RELEASE_PATH" ]; then
            echo "‚ùå Release directory does not exist: $RELEASE_PATH"
            echo "Available releases:"
            ls -la $RELEASES_PATH/
            exit 1
          fi
          
          # Extract files to release directory
          cd $RELEASE_PATH
          tar -xzf /tmp/deployment.tar.gz
          rm /tmp/deployment.tar.gz
          
          # Create .env file from secrets
          cat > $RELEASE_PATH/.env << 'EOF'
          ${{ secrets.ENV_FILE }}
          EOF
          
          # Create symlinks to shared directories
          rm -rf $RELEASE_PATH/storage
          ln -nfs $SHARED_PATH/storage $RELEASE_PATH/storage
          
          # Create bootstrap cache directory (required for Laravel)
          mkdir -p $RELEASE_PATH/bootstrap/cache
          
          # Set permissions
          chown -R www-data:www-data $RELEASE_PATH
          chown -R www-data:www-data $SHARED_PATH
          chmod -R 755 $RELEASE_PATH
          chmod -R 775 $SHARED_PATH/storage
          chmod -R 775 $RELEASE_PATH/bootstrap/cache
          
          # Install Composer dependencies on server
          cd $RELEASE_PATH
          composer install --no-dev --optimize-autoloader --no-interaction
          
          # Laravel setup
          php artisan key:generate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          
          # Create database if it doesn't exist
          echo "üîß Creating database if it doesn't exist..."
          export PGPASSWORD="$DB_PASSWORD"
          
          # First test connection to defaultdb
          if psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USERNAME" -d defaultdb -c "SELECT 1;" >/dev/null 2>&1; then
            echo "‚úÖ Successfully connected to PostgreSQL server"
            
            # Check if referral_app database exists
            DB_EXISTS=$(psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USERNAME" -d defaultdb -tAc "SELECT 1 FROM pg_database WHERE datname='referral_app';" 2>/dev/null)
            
            if [ "$DB_EXISTS" = "1" ]; then
              echo "‚úÖ Database 'referral_app' already exists"
            else
              echo "üîß Creating database 'referral_app'..."
              if psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USERNAME" -d defaultdb -c "CREATE DATABASE referral_app;" 2>/dev/null; then
                echo "‚úÖ Database 'referral_app' created successfully"
              else
                echo "‚ùå Failed to create database 'referral_app'"
                echo "This might be due to permissions or the database already existing"
              fi
            fi
          else
            echo "‚ùå Failed to connect to PostgreSQL server"
            echo "Connection details:"
            echo "Host: $DB_HOST"
            echo "Port: $DB_PORT"
            echo "Username: $DB_USERNAME"
            echo "This will cause the migration to fail"
          fi
          
          unset PGPASSWORD
          
          # Run database migrations
          php artisan migrate --force
          
          # Update current symlink atomically
          ln -nfs $RELEASE_PATH $CURRENT_PATH
          
          # Restart services
          sudo systemctl reload nginx
          sudo supervisorctl restart laravel-worker:*
          
          # Clean up old releases (keep last 5)
          cd $RELEASES_PATH
          ls -t | tail -n +6 | xargs rm -rf
          
          echo "Deployment completed successfully!"
          echo "Application is now live at: http://${{ secrets.HOST }}"

    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Wait longer for services to start
          echo "üîÑ Waiting for services to start..."
          sleep 10
          
          # Check nginx status
          echo "üîç Checking nginx status..."
          if sudo systemctl is-active --quiet nginx; then
            echo "‚úÖ Nginx is running"
          else
            echo "‚ùå Nginx is not running"
            sudo systemctl status nginx
          fi
          
          # Check PHP-FPM status
          echo "üîç Checking PHP-FPM status..."
          if sudo systemctl is-active --quiet php8.2-fpm; then
            echo "‚úÖ PHP-FPM is running"
          else
            echo "‚ùå PHP-FPM is not running"
            sudo systemctl status php8.2-fpm
          fi
          
          # Check if application files exist
          echo "üîç Checking application files..."
          APP_PATH="/var/www/referral-app/current"
          
          # Check if current symlink exists
          if [ -L "$APP_PATH" ]; then
            echo "‚úÖ Current symlink exists"
            echo "Symlink target: $(readlink $APP_PATH)"
          else
            echo "‚ùå Current symlink missing"
            echo "Contents of /var/www/referral-app/:"
            ls -la /var/www/referral-app/
          fi
          
          # Check if Laravel files exist
          if [ -f "$APP_PATH/public/index.php" ]; then
            echo "‚úÖ Laravel application files found"
            echo "Application structure:"
            ls -la $APP_PATH/
          else
            echo "‚ùå Laravel application files missing"
            if [ -d "$APP_PATH" ]; then
              echo "Directory contents:"
              ls -la $APP_PATH/
            else
              echo "Application path does not exist"
            fi
          fi
          
          # Test application with multiple URLs
          echo "üîç Testing application response..."
          
          # Test localhost with detailed response
          echo "Testing localhost response..."
          LOCALHOST_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" http://localhost 2>/dev/null)
          HTTP_CODE=$(echo "$LOCALHOST_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Application responding successfully on localhost (HTTP 200)"
          elif [ "$HTTP_CODE" = "500" ]; then
            echo "‚ö†Ô∏è  Application responding with HTTP 500 error on localhost"
            echo "This indicates a Laravel application error, not a deployment issue."
          elif [ -n "$HTTP_CODE" ]; then
            echo "‚ö†Ô∏è  Application responding with HTTP $HTTP_CODE on localhost"
          else
            echo "‚ùå Application not responding on localhost"
            echo "Nginx error log:"
            sudo tail -n 10 /var/log/nginx/error.log || echo "No nginx error log found"
          fi
          
          # Test with domain (if available)
          echo "Testing domain response..."
          DOMAIN_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" http://${{ secrets.HOST }} 2>/dev/null)
          DOMAIN_HTTP_CODE=$(echo "$DOMAIN_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
          
          if [ "$DOMAIN_HTTP_CODE" = "200" ]; then
            echo "‚úÖ Application responding successfully on domain (HTTP 200)"
          elif [ "$DOMAIN_HTTP_CODE" = "500" ]; then
            echo "‚ö†Ô∏è  Application responding with HTTP 500 error on domain"
          elif [ -n "$DOMAIN_HTTP_CODE" ]; then
            echo "‚ö†Ô∏è  Application responding with HTTP $DOMAIN_HTTP_CODE on domain"
          else
            echo "‚ùå Application not responding on domain"
          fi
          
          # Check Laravel logs
          echo "üîç Checking Laravel logs..."
          STORAGE_PATH="/var/www/referral-app/shared/storage/logs"
          if [ -f "$STORAGE_PATH/laravel.log" ]; then
            echo "Recent Laravel log entries:"
            sudo tail -n 5 "$STORAGE_PATH/laravel.log" || echo "Could not read Laravel logs"
          else
            echo "No Laravel log file found"
          fi
          
          # Check queue workers
          echo "üîç Checking queue workers..."
          if sudo supervisorctl status laravel-worker:* 2>/dev/null | grep -q RUNNING; then
            echo "‚úÖ Queue workers are running"
          else
            echo "‚ö†Ô∏è  Queue workers may not be running properly"
            sudo supervisorctl status laravel-worker:* 2>/dev/null || echo "No queue workers configured"
          fi
          
          # Laravel 500 Error Troubleshooting
          if [ "$HTTP_CODE" = "500" ] || [ "$DOMAIN_HTTP_CODE" = "500" ]; then
            echo ""
            echo "üîß Laravel 500 Error Troubleshooting:"
            echo "The deployment was successful, but Laravel is throwing a 500 error."
            echo ""
            
            # Check .env file exists
            if [ -f "$APP_PATH/.env" ]; then
              echo "‚úÖ .env file exists"
            else
              echo "‚ùå .env file missing"
            fi
            
            # Check APP_KEY is set
            if grep -q "APP_KEY=" "$APP_PATH/.env" && ! grep -q "APP_KEY=$" "$APP_PATH/.env"; then
              echo "‚úÖ APP_KEY is set"
            else
              echo "‚ùå APP_KEY is missing or empty"
              echo "Run: php artisan key:generate --force"
            fi
            
            # Check database connection
            echo "üîç Testing database connection..."
            cd $APP_PATH
            if php artisan migrate:status >/dev/null 2>&1; then
              echo "‚úÖ Database connection working"
            else
              echo "‚ùå Database connection failed"
              echo "Check your database credentials in .env file"
            fi
            
            # Check storage permissions
            if [ -w "$APP_PATH/storage" ]; then
              echo "‚úÖ Storage directory is writable"
            else
              echo "‚ùå Storage directory is not writable"
              echo "Run: chmod -R 775 storage"
            fi
            
            # Check bootstrap cache directory
            if [ -d "$APP_PATH/bootstrap/cache" ] && [ -w "$APP_PATH/bootstrap/cache" ]; then
              echo "‚úÖ Bootstrap cache directory exists and is writable"
            else
              echo "‚ùå Bootstrap cache directory missing or not writable"
              echo "Run: mkdir -p bootstrap/cache && chmod -R 775 bootstrap/cache"
            fi
            
            echo ""
            echo "üìã Next steps to fix 500 error:"
            echo "1. Check Laravel logs: tail -f /var/www/referral-app/shared/storage/logs/laravel.log"
            echo "2. Check PHP error logs: tail -f /var/log/php8.2-fpm.log"
            echo "3. Verify database credentials in .env file"
            echo "4. Run: php artisan config:clear && php artisan cache:clear"
          fi
          
          # Final status
          if [ "$HTTP_CODE" = "200" ] || [ "$DOMAIN_HTTP_CODE" = "200" ]; then
            echo "üéâ Deployment successful! Application is fully functional."
          elif [ "$HTTP_CODE" = "500" ] || [ "$DOMAIN_HTTP_CODE" = "500" ]; then
            echo "‚ö†Ô∏è  Deployment completed successfully, but Laravel has a 500 error."
            echo "This is an application-level issue, not a deployment problem."
          elif [ -n "$HTTP_CODE" ] || [ -n "$DOMAIN_HTTP_CODE" ]; then
            echo "‚ö†Ô∏è  Deployment completed, application responding but may need verification."
          else
            echo "‚ùå Deployment completed but application is not responding."
            echo "Please check your server configuration."
          fi
